package euler

import (
	"fmt"
	"math"
)

// 1 Multiples of 3 and 5
//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000.
func MultiplesOf3And5()  {
	var sum int = 0;
	for i := 0; i < 1000; i ++ {
		if i % 5 == 0 || i % 3 == 0 {
			sum += i
		}
	}
	fmt.Println(sum)
}

// 2 Even fibonacci numbers
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
func EvenFibonacciNumbers()  {
	sum := 0
	ch := make(chan int)
	go fibonacci(ch)
	for i := range ch {
		if i % 2 ==0 {
			sum += i
		}
	}
	fmt.Println(sum)
}
func fibonacci(ch chan int)  {
	var x,y int = 1,2
	for {
		if x > 4000000 {
			close(ch)
			return
		}
		ch <- x
		x,y = y,x+y
	}
	close(ch)
}

// 3 Largest prime factor
//The prime factors of 13195 are 5, 7, 13 and 29.
//What is the largest prime factor of the number 600851475143 ?
var factors []int64
func LargestPrimeFactor() {
	fermatFactorization(600851475143)
	fmt.Printf("the factors is %v, \nthe largest prime is %v \n", factors, biggest(factors))
}
func fermatFactorization(num int64) {
	if num % 2 == 0 {
		fmt.Println("the number need to be odd")
	}

	a := math.Ceil(math.Sqrt(float64(num)))
	b2 := a * a - float64(num)
	b := int64(math.Sqrt(b2))

	for ; float64(b * b) != b2; {
		a ++
		b2 = a * a -float64(num)
		b = int64(math.Sqrt(b2))
	}

	var x,y int64 = int64(a) + b, int64(a) - b
	if y != 1 {
		fermatFactorization(x)
		fermatFactorization(y)
	} else {
		factors = append(factors, x)
	}
}
func biggest(s []int64) int64  {
	n := s[0]
	for i := 0; i < cap(s); i ++ {
		if n < s[i] {
			n = s[i]
		}
	}
	return n
}

// 4 Largest palindrome product
// A palindromic number reads the same both ways.
// The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
//Find the largest palindrome made from the product of two 3-digit numbers.
func LargestPalindromeProduct() {
	for i := 999; i >= 100; i -- {
		for j := 999; j >= 100; j -- {
			var num = i * j;
			if isPalindrome(num) {
				fmt.Printf("the biggest palindrome is %d", num);
			}
		}
	}
}

func isPalindrome(num int64) bool {
	sum := 0
	temp := num
	for (num) {
		sum = sum * 10 + num % 10
		num = num / 10
	}
	if sum == temp {
		return true
	} else {
		return false
	}
}