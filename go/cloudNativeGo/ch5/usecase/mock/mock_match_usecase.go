// Code generated by MockGen. DO NOT EDIT.
// Source: ../match.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	models "github.com/GordonChen13/learn-examples/go/cloudNativeGo/ch5/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMatch is a mock of Match interface
type MockMatch struct {
	ctrl     *gomock.Controller
	recorder *MockMatchMockRecorder
}

// MockMatchMockRecorder is the mock recorder for MockMatch
type MockMatchMockRecorder struct {
	mock *MockMatch
}

// NewMockMatch creates a new mock instance
func NewMockMatch(ctrl *gomock.Controller) *MockMatch {
	mock := &MockMatch{ctrl: ctrl}
	mock.recorder = &MockMatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatch) EXPECT() *MockMatchMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMatch) Create(ctx context.Context, name string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMatchMockRecorder) Create(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMatch)(nil).Create), ctx, name)
}

// GetByName mocks base method
func (m *MockMatch) GetByName(ctx context.Context, name string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockMatchMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockMatch)(nil).GetByName), ctx, name)
}
